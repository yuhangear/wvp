# #1.安装docker
# curl -fsSL https://test.docker.com -o test-docker.sh
# sudo bash test-docker.sh

# #2.建立mysql镜像

# docker pull mysql 
# docker run -it  -p 50302:50302 --name  hk_mysql -e MYSQL_ROOT_PASSWORD=jkloli -d mysql  #-e MYSQL_ROOT_HOST=% 
# docker run  -p 50302:50302 --name  hk_mysql -e MYSQL_ROOT_PASSWORD=jkloli -d mysql 

# ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'jkloli';
# GRANT ALL ON *.* TO 'root'@'%';
# # grant all privileges on . to 'root'@'%' ;
# flush privileges;

# docker cp ./ini_sql.sql hk_mysql:/root/ 
# #进入sql
# docker exec -it hk_mysql mysql -u root -p

# CREATE DATABASE wvp; 
# USE wvp; 
# SOURCE /root/ini_sql.sql; 

# # 进入mysql方法：

# docker cp ./my.cnf  ce7da2325039:/etc/
# docker cp ./ini_sql.sql hk_wvp:/root/ 

# #建立redis镜像
# docker pull redis 
# docker run --name hk_redis -d -p 50301:50301 redis redis-server --port 50301  --requirepass 123456 --protected-mode no 
# docker start



#建立流服务器，wvp镜像
docker pull ubuntu:20.04 
docker run -it -p 50300-50314:50300-50314/tcp -p 50300-50314:50300-50314/udp --name hk_wvp ubuntu:20.04 

git clone https://gitee.com/xia-chu/ZLMediaKit.git
git clone https://gitee.com/pan648540858/wvp-GB28181-pro.git
wget https://nodejs.org/dist/v18.16.1/node-v18.16.1-linux-x64.tar.xz

docker cp ./wvp-GB28181-pro hk_wvp:/root/
docker cp ./node-v18.16.1-linux-x64 hk_wvp:/root/
docker cp ./ZLMediaKit hk_wvp:/root/

#进入镜像系统
docker exec -it hk_wvp /bin/bash 
apt-get update 
apt install software-properties-common 

add-apt-repository ppa:openjdk-r/ppa 
apt-get install -y cmake g++  openjdk-11-jre git maven ffmpeg  openssl libssl-dev  libsctp-dev




#安装mysql
apt-get install mysql-server 
apt install mysql-client 
apt install libmysqlclient-dev 

修改mysql密码 

ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'jkloli'; 
flush privileges;

docker cp ./ini_sql.sql hk_wvp:/root/

CREATE DATABASE wvp; 
USE wvp; 
SOURCE /root/ini_sql.sql; 

vim /etc/mysql/mysql.conf.d/mysqld.cnf #修改port和端口绑定

docker cp ./mysqld.cnf hk_wvp:/etc/mysql/mysql.conf.d/mysqld.cnf
#安装redis
apt install redis-server 
#
1.找到bind 127.0.0.1 ,把它进行注释
2.找到protected-mode yes 把它改成no。
#




#编译流媒体服务器

cd ZLMediaKit
git submodule update --init  
mkdir build 
cd build 
cmake .. 
make -j1

#编译 wvp
cd node-v18.16.1-linux-x64/bin/
dir=`pwd`
ln -s $dir/npm /usr/bin/
ln -s $dir/node /usr/bin/
cd ../..
cd wvp-GB28181-pro/web_src/ 
npm --registry=https://registry.npmmirror.com install 
npm run build -j1
cd ..
mvn package 
mvn package -P war

#设置配置文件，注意复制配置文件到docker之后，需要修改配置文件的访问权限，否者程序会忽视配置文件
#redis和mysql ip需要设置为 127.0.0.1 ; ZLM 端口数量最少35个
docker cp ./application.yml  955a876ca0c2:/root/wvp-GB28181-pro/target/
docker cp ./config.ini  955a876ca0c2:/root/ZLMediaKit/release/linux/Debug
docker cp ./mysqld.cnf hk_wvp:/etc/mysql/mysql.conf.d/mysqld.cnf
docker cp ./redis.conf hk_wvp:/etc/redis/redis.conf 
docker cp ./start.sh  hk_wvp:/root/

#运行
#在容器中运行
重启数据库
service mysql restart
service redis-server restart

cd /root/ZLMediaKit/release/linux/Debug 
./MediaServer
cd /root/wvp-GB28181-pro/target
java -jar wvp-pro-2.6.9-071316*.jar 

#在外面运行
docker exec  hk_wvp bash /root/start.sh
#如果已经有了镜像，以下直接运行镜像
docker run -d -p 50300-50350:50300-50350/tcp -p 50300-50350:50300-50350/udp --name hk_video wvp_hk  /bin/bash -c "/root/start.sh && tail -f /dev/null" 











